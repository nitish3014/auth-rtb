name: CI/CD Deploy to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION:          us-east-1
      AWS_ACCOUNT_ID:      972251037797
      EKS_CLUSTER_NAME:    rtb-eks-dev
      DEPLOYMENT_NAME:     rtb-dev-auth-service
      K8S_NAMESPACE:       default
      BASTION_IP:          35.170.113.92
      BASTION_USER:        ubuntu
      S3_BUCKET_NAME:      rtb-dev-artifact
      S3_ARTIFACT_KEY:     rtb-core-0.0.1-SNAPSHOT.jar

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Notify Build Start
      - name: Notify Build Start
        id: notify_start
        continue-on-error: true
        run: |
          set +e
          commit_details=$(git log -1 --pretty=format:'%s|%an')
          commit_message=${commit_details%%|*}
          committer_name=${commit_details##*|}
          build_name="${GITHUB_REPOSITORY}"
          build_number="${GITHUB_RUN_NUMBER}"
          build_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          # Google Chat payload
          read -r -d '' gchat_payload <<EOF
          {
            "text": "üöÄ *Build Started*\n*Repository:* ${build_name}\n*Run #:* ${build_number}\n*Trigger Commit:* ${commit_message}\n*By:* ${committer_name}\n*URL:* ${build_url}"
          }
          EOF

          # Slack payload
          read -r -d '' slack_payload <<EOF
          {
            "text": ":rocket: *Build Started*\n*Repository:* ${build_name}\n*Run #:* ${build_number}\n*Trigger Commit:* ${commit_message}\n*By:* ${committer_name}\n*URL:* ${build_url}"
          }
          EOF

          # Send Google Chat notification
          curl -X POST -H 'Content-Type: application/json' \
            --data "$gchat_payload" \
            "${{ secrets.GOOGLE_CHAT_WEBHOOK }}" || true

          # Send Slack notification
          curl -X POST -H 'Content-Type: application/json' \
            --data "$slack_payload" \
            "${{ secrets.SLACK_WEBHOOK }}" || true

      # 3. Configure AWS creds
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # 4. Fetch PEM keys
      - name: Fetch public/private keys
        run: |
          echo "${{ secrets.PUBLIC_KEY_FILE }}"  > public_key.pem
          echo "${{ secrets.PRIVATE_KEY_FILE }}" > private_key.pem

      # 5. Capture commit details
      - name: Capture commit details
        run: |
          INFO=$(git log -1 --pretty=format:'%s|%an')
          echo "COMMIT_MESSAGE=${INFO%%|*}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=${INFO##*|}"   >> $GITHUB_ENV

      # 6. Fetch artifact from S3
      - name: Fetch JAR from S3
        run: |
          mkdir -p libs
          aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/${{ env.S3_ARTIFACT_KEY }} libs/

      # 7. Retrieve Git version
      - name: Retrieve Git version
        run: |
          SHA=$(git rev-parse --short HEAD)
          VER="${SHA}-${GITHUB_RUN_NUMBER}"
          echo "VERSION=${VER}" >> $GITHUB_ENV

      # 8. Install jq (for later JSON parsing)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 9. Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # 10. Fetch kubeconfig via Bastion
      - name: Fetch kubeconfig via Bastion
        run: |
          echo "${{ secrets.BASTION_PEM_KEY }}" > bastion_key.pem
          chmod 600 bastion_key.pem
          ssh -o StrictHostKeyChecking=no \
              -i bastion_key.pem \
              ${{ env.BASTION_USER }}@${{ env.BASTION_IP }} \
              "aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}"
          scp -o StrictHostKeyChecking=no \
              -i bastion_key.pem \
              ${{ env.BASTION_USER }}@${{ env.BASTION_IP }}:~/.kube/config ./kubeconfig

      # 11. Fetch AWS Secrets & create/update K8s secret
      - name: Fetch AWS Secrets & Store in Kubernetes
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          DB=$(aws secretsmanager get-secret-value --secret-id rtb-dev/db  --query SecretString --output text)
          AW=$(aws secretsmanager get-secret-value --secret-id rtb-dev/auth-service --query SecretString --output text)
          if [ -z "$DB" ] || [ -z "$AW" ]; then
            echo "‚ùå Missing AWS secrets" && exit 1
          fi
          echo "$DB" | jq -r 'to_entries|.[]|"\(.key)=\(.value)"'  > /tmp/secrets.env
          echo "$AW" | jq -r 'to_entries|.[]|"\(.key)=\(.value)"' >> /tmp/secrets.env
          tac /tmp/secrets.env | awk -F= '!seen[$1]++' | tac > /tmp/secrets.unique.env
          PUB_B64=$(base64 public_key.pem | tr -d '\n')
          echo "PUBLIC_KEY_CONTENT=${PUB_B64}" >> /tmp/secrets.unique.env

          kubectl delete secret ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} --ignore-not-found
          kubectl create secret generic ${{ env.DEPLOYMENT_NAME }} \
            --from-env-file=/tmp/secrets.unique.env \
            -n ${{ env.K8S_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      # 12. Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin \
              ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # 13. Build & push Docker image
      - name: Build & Push Docker Image
        run: |
          IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DEPLOYMENT_NAME }}
          docker build --no-cache \
            -t ${IMAGE_URI}:${{ env.VERSION }} \
            -t ${IMAGE_URI}:latest .
          docker push ${IMAGE_URI}:${{ env.VERSION }}
          docker push ${IMAGE_URI}:latest


      # 14. Deploy to EKS
      - name: Deploy to EKS
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.DEPLOYMENT_NAME }}=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.DEPLOYMENT_NAME }}:${{ env.VERSION }} \
            -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}

      # 15. Notify Build Result
      - name: Notify Build Result
        if: always()
        continue-on-error: true
        run: |
          set +e
          if [ "${{ job.status }}" = "success" ]; then
            build_status="‚úÖ Succeeded"
          else
            build_status="‚ùå Failed"
          fi
          commit_details=$(git log -1 --pretty=format:'%s|%an')
          commit_message=${commit_details%%|*}
          committer_name=${commit_details##*|}
          build_name="${GITHUB_REPOSITORY}"
          build_number="${GITHUB_RUN_NUMBER}"
          build_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          # Google Chat payload
          read -r -d '' gchat_payload <<EOF
          {
            "text": "üîî *Build Completed*\n*Repository:* ${build_name}\n*Run #:* ${build_number}\n*Status:* ${build_status}\n*Trigger Commit:* ${commit_message}\n*By:* ${committer_name}\n*URL:* ${build_url}"
          }
          EOF

          # Slack payload
          read -r -d '' slack_payload <<EOF
          {
            "text": ":bell: *Build Completed*\n*Repository:* ${build_name}\n*Run #:* ${build_number}\n*Status:* ${build_status}\n*Trigger Commit:* ${commit_message}\n*By:* ${committer_name}\n*URL:* ${build_url}"
          }
          EOF

          curl -X POST -H 'Content-Type: application/json' \
            --data "$gchat_payload" \
            "${{ secrets.GOOGLE_CHAT_WEBHOOK }}" || true

          curl -X POST -H 'Content-Type: application/json' \
            --data "$slack_payload" \
            "${{ secrets.SLACK_WEBHOOK }}" || true
